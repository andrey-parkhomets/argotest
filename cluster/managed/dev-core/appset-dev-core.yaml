apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: appset-dev-core
spec:
  applyNestedSelectors: true
  goTemplate: true
  # goTemplateOptions: ["missingkey=error"]
  generators:
    - matrix:
        generators:
          - matrix:
              generators:
              - clusters:
                  selector:
                    matchExpressions:
                    - {key: env, operator: In, values: [dev]}
                    - {key: color, operator: In, values: [green]}
              - list:
                  elements:
                  - appName: external-secrets
                    appChartRepoURL: https://github.com/andrey-parkhomets/argotest.git
                    apptargetRevision: HEAD
                    namespace: kube-infra-vault
                    valueFiles:
                    - "values-{{.metadata.labels.env}}.yaml"
                    - "values-{{.metadata.labels.env}}-{{.metadata.labels.color}}.yaml"

                  - appName: azure-csi
                    appChartRepoURL: https://github.com/andrey-parkhomets/argotest.git
                    apptargetRevision: HEAD
                    namespace: kube-system

          - git:
              repoURL: https://github.com/andrey-parkhomets/argotest.git
              revision: HEAD
              files:
                - path: cluster/k8s-charts/{{.appName}}/.config.yaml
              values:
                foo: bar

  ignoreApplicationDifferences:
  - jqPathExpressions:
    - .spec.source.helm.parameters
    - .spec.source.helm.values
    - .spec.sources[] | .helm.parameters
    - .spec.sources[] | .helm.values
  strategy:
    type: RollingSync
    rollingSync:
      steps:
        - matchExpressions:
            - key: appName
              operator: In
              values:
                - external-secrets
          maxUpdate: 1
        - matchExpressions:
            - key: appName
              operator: In
              values:
                - azure-csi
          maxUpdate: 1
  templatePatch: |
    spec:
      source:
        helm:
          parameters:
          - name: revisionHistoryLimit
            value: "5"

          - name: app.image.tag
            value: '{{index . "app" .metadata.labels.env .metadata.labels.color "image" "tag" |default "latest"}}'

          - name: app.commit.sha
            value: '{{index . "app" .metadata.labels.env .metadata.labels.color "commit" "sha" |default ""}}'

          - name: app.color
            value: "{{.metadata.labels.color}}" #color

          - name: app.env
            value: "{{.metadata.labels.env}}" #env

          valueFiles:
            - "values.yaml"
          {{- range $valueFile := .valueFiles }}
            - {{ $valueFile }}
          {{- end }}

          valuesObject:
            app:
              "{{.metadata.labels.env}}":
                "{{.metadata.labels.color}}":
                  image:
                    tag: '{{ index . "app" .metadata.labels.env .metadata.labels.color "image" "tag" }}'
                  commit:
                    sha: '{{ index . "app" .metadata.labels.env .metadata.labels.color "commit" "sha" }}'
              labels:
                argocd.argoproj.io/instance: '{{.appName }}-{{.metadata.labels.env}}-{{.metadata.labels.color}}'
              namespace: '{{.namespace}}'
              ingress:
                dnsSuffix: '{{index .metadata.annotations "dnsSuffix" |default (get (urlParse .server) "host") }}'

  template:
    metadata:
      name: '{{.appName}}-{{.metadata.labels.env}}-{{.metadata.labels.color}}'
      labels:
        appName: '{{.appName}}'
        site: '{{.metadata.labels.site}}'
        env: '{{.metadata.labels.env}}'
        color: '{{.metadata.labels.color}}'
        autoSync: '{{or .autoSync "undefined"}}'
        imageTag: '{{or .app.dev.green.image.tag "latest"}}'
      annotations:
        team: '{{.metadata.annotations.team}}'
    spec:
      project: project-dev-clusters
      source:
          repoURL: "{{.appChartRepoURL}}"
          # chart: '{{.chart}}'
          targetRevision: "{{.apptargetRevision}}"
          path: "cluster/k8s-charts/{{.appName}}"
           # use next in helm.values to see generated result structure
           # {{.|toYaml}}
          helm:
            # values: |
            #   {{.|toYaml}}
            releaseName: "{{.appname}}"
            #################
            #
            # The helm.parameters - specific feature and may not be needed for all apps, here it's just example.
            #
            ##################
            # parameters:
            # - name: revisionHistoryLimit
            #   value: "5"

            # - name: app.image.tag
            #   value: '{{index . "app" .metadata.labels.env .metadata.labels.color "image" "tag" |default "latest"}}'

            # - name: app.commit.sha
            #   value: '{{index . "app" .metadata.labels.env .metadata.labels.color "commit" "sha" |default ""}}'

            # - name: app.color
            #   value: "{{.metadata.labels.color}}" #color

            # - name: app.env
            #   value: "{{.metadata.labels.env}}" #env

            ######################
            # valueFiles:
            #   - "values.yaml"
            #   - "values-{{.metadata.labels.env}}.yaml"
            #   - "values-{{.metadata.labels.env}}-{{.metadata.labels.color}}.yaml"
            ######################
            # valuesObject:
            #   app:
            #     "{{.metadata.labels.env}}":
            #       "{{.metadata.labels.color}}":
            #         image:
            #           tag: '{{ index . "app" .metadata.labels.env .metadata.labels.color "image" "tag" }}'
            #         commit:
            #           sha: '{{ index . "app" .metadata.labels.env .metadata.labels.color "commit" "sha" }}'
            #     labels:
            #       argocd.argoproj.io/instance: '{{.appName }}-{{.metadata.labels.env}}-{{.metadata.labels.color}}'
            #     namespace: '{{.namespace}}'
            #     ingress:
            #       dnsSuffix: '{{index .metadata.annotations "dnsSuffix" |default (get (urlParse .server) "host") }}'
      destination:
        # name: '{{.name}}'
        namespace: "{{.namespace}}"
        server: https://kubernetes.default.svc

      syncPolicy:
        automated:
          prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
          selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
          allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
        syncOptions:
        - Retry=true
        - ApplyOutOfSyncOnly=true
        - FailOnSharedResource=true
        - CreateNamespace=true
        # - PrunePropagationPolicy=orphan
        managedNamespaceMetadata: # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above), otherwise it's a no-op.
          labels: # The labels to set on the application namespace
            any: label
            you: like
          annotations: # The annotations to set on the application namespace
            the: same
            applies: for
            annotations: on-the-namespace
        retry:
          limit: 5 # Maximum number of retries
          backoff:
            duration: 5s # Initial retry interval
            factor: 2 # Multiplication factor for the backoff
            maxDuration: 1m # Maximum retry interval
